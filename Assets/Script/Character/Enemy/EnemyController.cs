using UnityEngine;

public class EnemyController : CharacterController
{
    /// <summary>
    /// エネミーのスクリプタブルオブジェクトのインスタンス
    /// </summary>
    [SerializeField]
    protected EnemyScriptableObject     data = null;
    /// <summary>
    /// のGet関数
    /// </summary>
    /// <returns></returns>
    public EnemyScriptableObject        GetData() {  return data; }
    /// <summary>
    /// NavMeshAgentの処理をまとめたクラス
    /// </summary>
    protected NavMeshController         navMeshController = null;
    /// <summary>
    /// のGet関数
    /// </summary>
    /// <returns></returns>
    public NavMeshController            GetNavMeshController() { return navMeshController; }
    /// <summary>
    /// プレイヤーを発見してるか判定するフラグ
    /// </summary>
    [SerializeField]
    protected bool                      foundPlayer = false;
    /// <summary>
    /// のGetSet関数
    /// </summary>
    public bool                         FoundPlayer { get { return foundPlayer; }set { foundPlayer = value; } }
    /// <summary>
    /// 発見した時にPlayerControllerのクラスを保持するクラスのインスタンス宣言
    /// </summary>
    [SerializeField]
    protected PlayerController          target = null;
    /// <summary>
    /// のGetSet関数
    /// </summary>
    public PlayerController             Target { get { return target; } set { target = value; } }

    /// <summary>
    /// NavMeshAgentで使う変数
    /// </summary>
    //NavMeshAgentのゴール座標を代入する変数
    [SerializeField]
    protected Vector3                   goalPosition = Vector3.zero;
    //の GetSet関数
    public Vector3                      GoalPosition { get { return goalPosition; } set { goalPosition = value; } }
    //徘徊時にランダムに座標を設定する時の半径変数
    [SerializeField]
    protected float                     loiterRadius = 10f;
    //のGet関数
    public float                        GetLoiterRadius() { return loiterRadius; }
    /// <summary>
    /// ダメージの処理を管理するクラス
    /// </summary>
    protected EnemyDamageCommand        damage = null;
    //のGet関数
    public EnemyDamageCommand           GetDamage() { return damage; }
    /// <summary>
    /// 敵の継承先で使うタイマーをまとめたクラス
    /// </summary>
    protected EnemyTimer                timer = null;
    //の Get関数
    public EnemyTimer                   GetTimer() { return timer; }

    protected override void Awake()
    {
        InitializeAssign();
    }

    protected override void InitializeAssign()
    {
        base.InitializeAssign();
        damage = new EnemyDamageCommand(this);

        timer = new EnemyTimer();
        timer.InitializeAssignTimer();
    }
    
    protected override void Start()
    {
        base.Start();
        //最初は3秒待たせる
        timer.GetTimerIdle().StartTimer(3f);
        //状態は待機に設定
        characterStatus.CurrentState = CharacterTagList.StateTag.Idle;
        //スクリプタブルオブジェクトがあるなら
        if(data != null)
        {
            characterStatus.SetMaxHP(data.MaxHP);
            characterStatus.HP = characterStatus.GetMaxHP();
        }
    }


    protected override void SetMotionController()
    {
        motion = new EnemyMotion(this);
    }

    protected override void Update()
    {
        if (Time.timeScale <= 0) { return; }
        base.Update();
        timer.TimerUpdate();
    }


    public override void Death()
    {
        base.Death();
        motion.ChangeMotion(CharacterTagList.StateTag.Die);
        timer.GetTimerDie().StartTimer(GetDieTimerCount());
        timer.GetTimerDie().OnCompleted += () =>
        {
            CreateDieEffect(GetDieEffectScale());
            Destroy(gameObject);
            if (gameObject == CameraController.LockObject)
            {
                CameraController.LockObject = null;
            }
        };
    }

    protected virtual float GetDieTimerCount() { return 1f; }

    protected virtual float GetDieEffectScale() { return 1f; }

    private void CreateDieEffect(float scale)
    {
        effectController.CreateVFX((int)EffectTagList.CharacterEffectTag.Death, transform.position,scale, Quaternion.identity);
    }
}
